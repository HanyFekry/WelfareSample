// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WelfareDataAccess.Data;

#nullable disable

namespace WelfareDataAccess.Migrations
{
    [DbContext(typeof(WelfareManagementDbContext))]
    [Migration("20250527151754_removeRequestId-UpdateBeneficiary")]
    partial class removeRequestIdUpdateBeneficiary
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActionTypeBatchRequestStep", b =>
                {
                    b.Property<int>("ActionTypesActionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BatchRequestStepsBatchRequestStepId")
                        .HasColumnType("int");

                    b.HasKey("ActionTypesActionTypeId", "BatchRequestStepsBatchRequestStepId");

                    b.HasIndex("BatchRequestStepsBatchRequestStepId");

                    b.ToTable("ActionTypeBatchRequestStep");
                });

            modelBuilder.Entity("ActionTypeWelfareRequestStep", b =>
                {
                    b.Property<int>("ActionTypesActionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WelfareRequestStepsWelfareRequestStepId")
                        .HasColumnType("int");

                    b.HasKey("ActionTypesActionTypeId", "WelfareRequestStepsWelfareRequestStepId");

                    b.HasIndex("WelfareRequestStepsWelfareRequestStepId");

                    b.ToTable("ActionTypeWelfareRequestStep");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.ActionType", b =>
                {
                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ActionTypeId")
                        .HasName("PK_AcctionType");

                    b.ToTable("ActionType", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.AttachmentType", b =>
                {
                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AttachmentTypeID")
                        .HasComment("Unique identifier for the attachment type");

                    b.Property<int>("AttachmentEntityType")
                        .HasColumnType("int")
                        .HasComment("Enum value(WelfareRequest,Memorandum,Batch)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Code representing the attachment type");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the attachment type is mandatory");

                    b.Property<int>("MaxFileCount")
                        .HasColumnType("int")
                        .HasComment("Number of files allowed for the attachment type");

                    b.Property<string>("MimeTypes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasComment("Allowed MIME types for the attachment");

                    b.Property<int?>("SizeLimit")
                        .HasColumnType("int")
                        .HasComment("Limit on the size of the attachment");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("English text description of the attachment type");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Arabic text description of the attachment type");

                    b.HasKey("AttachmentTypeId");

                    b.HasIndex(new[] { "AttachmentEntityType" }, "IX_AttachmentType_FK_WelfareTypeID");

                    b.ToTable("AttachmentType", null, t =>
                        {
                            t.HasComment("Table storing attachment types");
                        });
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BatchRequest", b =>
                {
                    b.Property<int>("BatchRequestId")
                        .HasColumnType("int");

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("User ID of the user who created the request record");

                    b.Property<string>("CreatedByUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User name of the user who created the request record");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the request was created");

                    b.Property<string>("Notes")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the request record was last updated");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("User ID of the user who last updated the request record");

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User name of the user who last updated the request record");

                    b.HasKey("BatchRequestId");

                    b.ToTable("BatchRequest", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BatchRequestAction", b =>
                {
                    b.Property<long>("BatchRequestActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BatchRequestActionId"));

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ActionTypeID")
                        .HasComment("Type of action performed");

                    b.Property<int>("BatchRequestId")
                        .HasColumnType("int")
                        .HasColumnName("FK_BatchRequestID")
                        .HasComment("Parent request identifier");

                    b.Property<int>("BatchRequestStepId")
                        .HasColumnType("int")
                        .HasColumnName("FK_BatchRequestStepId")
                        .HasComment("Current step in workflow for the action");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("User ID of the user who created the request record");

                    b.Property<string>("CreatedByUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User name of the user who created the request record");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the request was created");

                    b.Property<int?>("WorkflowReasonId")
                        .HasColumnType("int")
                        .HasColumnName("FK_WorkflowReasonID")
                        .HasComment("Reason for workflow action, if applicable");

                    b.HasKey("BatchRequestActionId");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("BatchRequestId");

                    b.HasIndex("BatchRequestStepId");

                    b.HasIndex("WorkflowReasonId");

                    b.ToTable("BatchRequestAction", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BatchRequestAttachment", b =>
                {
                    b.Property<int>("BatchAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchAttachmentId"));

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_AttachmentTypeId");

                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("FK_BatchId");

                    b.HasKey("BatchAttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("BatchId");

                    b.ToTable("BatchRequestAttachment", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BatchRequestStep", b =>
                {
                    b.Property<int>("BatchRequestStepId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code representing the request step");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("English text description of the request step");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Arabic text description of the request step");

                    b.HasKey("BatchRequestStepId");

                    b.ToTable("BatchRequestStep", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Beneficiary", b =>
                {
                    b.Property<long>("BeneficiaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BeneficiaryID")
                        .HasComment("Unique identifier for Beneficiary");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BeneficiaryId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(8, 2)")
                        .HasComment("Amount to be disbursed for beneficiary");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(120)")
                        .HasComment("Beneficiary name");

                    b.Property<string>("Iban")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("IBAN");

                    b.Property<long?>("LaborId")
                        .HasColumnType("bigint")
                        .HasColumnName("FK_LaborID")
                        .HasComment("Unique identifier for labor associated with request");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("NationalID")
                        .IsFixedLength()
                        .HasComment("National identification number of the labor");

                    b.Property<int>("RelativeRelationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_RelativeRelationTypeID")
                        .HasComment("Relationship to dead employee");

                    b.Property<long>("SocialWelfareRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("FK_SocialWelfareRequestId")
                        .HasComment("Identifier of social request if applicable");

                    b.HasKey("BeneficiaryId");

                    b.HasIndex(new[] { "RelativeRelationTypeId" }, "IX_Beneficiary_FK_RelativeRelationTypeID");

                    b.HasIndex(new[] { "SocialWelfareRequestId" }, "IX_Beneficiary_FK_SocialWelfareRequestId");

                    b.ToTable("Beneficiary", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BeneficiaryType", b =>
                {
                    b.Property<int>("BeneficiaryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryTypeId");

                    b.ToTable("BeneficiaryType", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BusinessNature", b =>
                {
                    b.Property<int>("BusinessNatureId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessNatureID")
                        .HasComment("Unique identifier for the business nature");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Code representing the business nature");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the business nature is active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the business nature is deleted");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("English text description of the business nature");

                    b.Property<string>("Text2")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Arabic text description of the business nature");

                    b.HasKey("BusinessNatureId");

                    b.ToTable("BusinessNature", null, t =>
                        {
                            t.HasComment("Table storing business natures");
                        });
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Directorate", b =>
                {
                    b.Property<int>("DirectorateId")
                        .HasColumnType("int")
                        .HasColumnName("DirectorateID")
                        .HasComment("Unique identifier for the directorate");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Code representing the directorate");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int")
                        .HasColumnName("FK_GovernorateID")
                        .HasComment("Foreign key to the Governorate table");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the directorate is active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the directorate is deleted");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("English text description of the directorate");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Arabic text description of the directorate");

                    b.HasKey("DirectorateId");

                    b.ToTable("Directorate", null, t =>
                        {
                            t.HasComment("Table storing directorates");
                        });
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID")
                        .HasComment("Unique identifier for the gender");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Code representing the gender");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("English text description of the gender");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Arabic text description of the gender");

                    b.HasKey("GenderId");

                    b.ToTable("Gender", null, t =>
                        {
                            t.HasComment("Table storing gender information");
                        });
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Labor", b =>
                {
                    b.Property<long>("LaborId")
                        .HasColumnType("bigint")
                        .HasColumnName("LaborID");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DeathDate")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("FK_GenderID");

                    b.Property<bool>("HasFullDisability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("InsuranceNo")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<int?>("InsurancePeriod")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceSectorId")
                        .HasColumnType("int")
                        .HasColumnName("FK_InsuranceSectorID");

                    b.Property<bool>("IsBeneficiary")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("CASE WHEN [DeathDate] IS NULL AND [HasFullDisability] = 0 THEN CAST(1 AS bit) ELSE CAST(0 AS bit) END", true)
                        .HasComment("the worker's status must be Beneficiary or  Not Beneficiary, default is Beneficiary(1)");

                    b.Property<int?>("LastBusinessNatureId")
                        .HasColumnType("int")
                        .HasColumnName("FK_LastBusinessNatureID");

                    b.Property<int?>("LastDirectorateId")
                        .HasColumnType("int")
                        .HasColumnName("FK_LastDirectorateID");

                    b.Property<long?>("LastExecutionPartyId")
                        .HasColumnType("bigint")
                        .HasColumnName("FK_LastExecutionPartyID");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("FK_MaritalStatusID");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("char(13)")
                        .IsFixedLength();

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .HasColumnName("NationalID")
                        .IsFixedLength();

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OccupationId")
                        .HasColumnType("int")
                        .HasColumnName("FK_OccupationID");

                    b.Property<DateOnly?>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("RegistrationNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("LaborId");

                    b.HasIndex(new[] { "GenderId" }, "IX_Labor_FK_GenderID");

                    b.HasIndex(new[] { "LastBusinessNatureId" }, "IX_Labor_FK_LastBusinessNatureID");

                    b.HasIndex(new[] { "LastDirectorateId" }, "IX_Labor_FK_LastDirectorateID");

                    b.HasIndex(new[] { "LastExecutionPartyId" }, "IX_Labor_FK_LastExecutionPartyID");

                    b.HasIndex(new[] { "MaritalStatusId" }, "IX_Labor_FK_MaritalStatusID");

                    b.HasIndex(new[] { "OccupationId" }, "IX_Labor_FK_OccupationID");

                    b.ToTable("Labor", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MaritalStatusID")
                        .HasComment("Unique identifier for each marital status record");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Code representing the marital status");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("English text description of the marital status");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Arabic text description of the marital status");

                    b.HasKey("MaritalStatusId");

                    b.ToTable("MaritalStatus", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.MedicalServiceProvider", b =>
                {
                    b.Property<int>("MedicalServiceProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Iban")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("IBAN");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MedicalServiceProviderId");

                    b.ToTable("MedicalServiceProvider", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.MedicalWelfareRequest", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryIban")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("BeneficiaryIBAN");

                    b.Property<string>("BeneficiaryName")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("BeneficiaryNid")
                        .HasColumnType("int")
                        .HasColumnName("BeneficiaryNId");

                    b.Property<int?>("BeneficiaryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_BeneficiaryTypeId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MedicalServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("FK_MedicalServiceProviderId");

                    b.Property<byte?>("NoOfPrescriptions")
                        .HasColumnType("tinyint");

                    b.HasKey("RequestId");

                    b.HasIndex(new[] { "BeneficiaryTypeId" }, "IX_MedicalWelfareRequest_FK_BeneficiaryTypeId");

                    b.HasIndex(new[] { "MedicalServiceProviderId" }, "IX_MedicalWelfareRequest_FK_MedicalServiceProviderId");

                    b.ToTable("MedicalWelfareRequest", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Memorandum", b =>
                {
                    b.Property<int>("MemorandumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemorandumId"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("User ID of the user who created the request record");

                    b.Property<string>("CreatedByUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User name of the user who created the request record");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the request was created");

                    b.Property<string>("MemorandumNo")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("Notes")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("RequestType")
                        .HasColumnType("int")
                        .HasColumnName("FK_RequestType");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the request record was last updated");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("User ID of the user who last updated the request record");

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User name of the user who last updated the request record");

                    b.HasKey("MemorandumId");

                    b.HasIndex("RequestType");

                    b.ToTable("Memorandum", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.MemorandumAttachment", b =>
                {
                    b.Property<int>("MemorandumAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemorandumAttachmentId"));

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_AttachmentTypeId");

                    b.Property<int>("MemorandumId")
                        .HasColumnType("int")
                        .HasColumnName("FK_MemorandumId");

                    b.HasKey("MemorandumAttachmentId");

                    b.HasIndex("AttachmentTypeId");

                    b.HasIndex("MemorandumId");

                    b.ToTable("MemorandumAttachments");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.NotificationReceiverType", b =>
                {
                    b.Property<int>("NotificationReceiverTypeId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationReceiverTypeID")
                        .HasComment("A unique identifier for each notification receiver type.");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("A unique code representing the notification receiver type.");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The English description or name of the notification receiver type.");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("An optional Arabic description or additional information for the notification receiver type.");

                    b.HasKey("NotificationReceiverTypeId");

                    b.ToTable("NotificationReceiverType", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Occupation", b =>
                {
                    b.Property<int>("OccupationId")
                        .HasColumnType("int")
                        .HasColumnName("OccupationID")
                        .HasComment("Unique identifier for each occupation record");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Code representing the occupation");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("English text description of the occupation");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Arabic text description of the occupation");

                    b.HasKey("OccupationId");

                    b.ToTable("Occupation", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Party", b =>
                {
                    b.Property<long>("PartyId")
                        .HasColumnType("bigint")
                        .HasColumnName("PartyID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PartyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_PartyTypeID");

                    b.HasKey("PartyId");

                    b.HasIndex(new[] { "PartyTypeId" }, "IX_Party_FK_PartyTypeID");

                    b.ToTable("Party", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.PartyType", b =>
                {
                    b.Property<int>("PartyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PartyTypeID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the business nature is active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Indicates if the business nature is deleted");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PartyTypeId");

                    b.ToTable("PartyType", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.RelativeRelationType", b =>
                {
                    b.Property<int>("RelativeRelationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("RelativeRelationTypeID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RelativeRelationTypeId");

                    b.ToTable("RelativeRelationType", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.RelativeRelationship", b =>
                {
                    b.Property<int>("RelativeRelationshipId")
                        .HasColumnType("int")
                        .HasColumnName("RelativeRelationshipID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RelativeRelationshipId");

                    b.ToTable("RelativeRelationship", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.RequestStatus", b =>
                {
                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int")
                        .HasColumnName("RequestStatusID")
                        .HasComment("Unique identifier for each request status record");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Code representing the request status");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("English text description of the request status");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Arabic text description of the request status");

                    b.HasKey("RequestStatusId");

                    b.ToTable("RequestStatus", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.RequestType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int")
                        .HasColumnName("RequestTypeID")
                        .HasComment("Unique identifier for each request type");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Code representing the request type");

                    b.Property<bool>("IsMemorandum")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("English text description of the request type");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Arabic text description of the request type");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestType", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.RequesterRelevance", b =>
                {
                    b.Property<int>("RequesterRelevantId")
                        .HasColumnType("int")
                        .HasColumnName("RequesterRelevantID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequesterRelevantId")
                        .HasName("PK_RequesterRelevant");

                    b.ToTable("RequesterRelevance", null, t =>
                        {
                            t.HasComment("Labor or Medical provider or Other");
                        });
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareCategory", b =>
                {
                    b.Property<byte>("WelfareCategoryId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WelfareCategoryId");

                    b.ToTable("WelfareCategory", null, t =>
                        {
                            t.HasComment("Monetary or ");
                        });
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequest", b =>
                {
                    b.Property<long>("WelfareRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WelfareRequestId"));

                    b.Property<int?>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("FK_BatchId");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("User ID of the user who created the request record");

                    b.Property<string>("CreatedByUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User name of the user who created the request record");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the request was created");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("int")
                        .HasColumnName("FK_DirectorateID")
                        .HasComment("Identifier for the directorate associated with the request");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<int>("LaborId")
                        .HasColumnType("int")
                        .HasColumnName("FK_LaborId");

                    b.Property<string>("LaborMobileNo")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int?>("MemorandumId")
                        .HasColumnType("int")
                        .HasColumnName("FK_MemorandumId");

                    b.Property<string>("Notes")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RequestNo")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int")
                        .HasColumnName("FK_RequestStatusID")
                        .HasComment("Identifier for the current status of a current workflow");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the request record was last updated");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("User ID of the user who last updated the request record");

                    b.Property<string>("UpdatedUserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User name of the user who last updated the request record");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasComment("Timestamp for version control of the request record");

                    b.Property<int>("WelfareTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_WelfareTypeID")
                        .HasComment("Identifier for the type of request");

                    b.HasKey("WelfareRequestId");

                    b.HasIndex("BatchId");

                    b.HasIndex("MemorandumId");

                    b.HasIndex(new[] { "DirectorateId" }, "IX_Request_FK_DirectorateID");

                    b.HasIndex(new[] { "RequestStatusId" }, "IX_Request_FK_StatusID");

                    b.HasIndex(new[] { "WelfareTypeId" }, "IX_Request_FK_WelfareTypeID");

                    b.ToTable("WelfareRequest", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequestAction", b =>
                {
                    b.Property<long>("WelfareRequestActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WelfareRequestActionId"));

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_ActionTypeID")
                        .HasComment("Type of action performed");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("User ID of the user who created the request record");

                    b.Property<string>("CreatedByUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("User name of the user who created the request record");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the request was created");

                    b.Property<long>("WelfareRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("FK_WelfareRequestID")
                        .HasComment("Parent request identifier");

                    b.Property<int>("WelfareRequestStepId")
                        .HasColumnType("int")
                        .HasColumnName("FK_WelfareRequestStepId")
                        .HasComment("Current step in workflow for the action");

                    b.Property<int?>("WorkflowReasonId")
                        .HasColumnType("int")
                        .HasColumnName("FK_WorkflowReasonID")
                        .HasComment("Reason for workflow action, if applicable");

                    b.HasKey("WelfareRequestActionId");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("WelfareRequestId");

                    b.HasIndex("WelfareRequestStepId");

                    b.HasIndex("WorkflowReasonId");

                    b.ToTable("WelfareRequestAction", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequestAttachment", b =>
                {
                    b.Property<long>("WelfareRequestAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WelfareRequestAttachmentId"));

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FK_AttachmentTypeId");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("FK_RequestId");

                    b.HasKey("WelfareRequestAttachmentId")
                        .HasName("PK_RequestAttachments_1");

                    b.HasIndex(new[] { "AttachmentTypeId" }, "IX_RequestAttachments_FK_AttachmentTypeId");

                    b.HasIndex(new[] { "RequestId" }, "IX_RequestAttachments_FK_RequestId");

                    b.ToTable("WelfareRequestAttachment", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequestStep", b =>
                {
                    b.Property<int>("WelfareRequestStepId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WelfareRequestStepId");

                    b.ToTable("WelfareRequestStep", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareType", b =>
                {
                    b.Property<int>("WelfareTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WelfareTypeID")
                        .HasComment("Unique identifier for each Welfare type");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Code representing the Welfare type");

                    b.Property<byte?>("MaximumLimit")
                        .HasColumnType("tinyint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("English text description of the Welfare type");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Arabic text description of the Welfare type");

                    b.Property<decimal?>("WelfareAmount")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<byte>("WelfareCategoryId")
                        .HasColumnType("tinyint")
                        .HasColumnName("FK_WelfareCategoryId");

                    b.HasKey("WelfareTypeId");

                    b.HasIndex(new[] { "WelfareCategoryId" }, "IX_WelfareType_FK_WelfareCategoryId");

                    b.ToTable("WelfareType", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WorkflowReason", b =>
                {
                    b.Property<int>("WorkflowReasonId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorkflowType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WorkflowReasonId");

                    b.ToTable("WorkflowReason", (string)null);
                });

            modelBuilder.Entity("WelfareTypesAttachmentTypes", b =>
                {
                    b.Property<int>("WelfareTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WelfareTypeID");

                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AttachmentTypeID");

                    b.HasKey("WelfareTypeId", "AttachmentTypeId");

                    b.HasIndex("AttachmentTypeId");

                    b.ToTable("WelfareTypesAttachmentTypes", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.DisabilityWelfareRequest", b =>
                {
                    b.HasBaseType("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequest");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("DisabilityRatio")
                        .HasColumnType("decimal(2, 0)");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.ToTable("DisabilityWelfareRequest", (string)null);
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.SocialWelfareRequest", b =>
                {
                    b.HasBaseType("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequest");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsTwin")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .IsFixedLength();

                    b.Property<int?>("RelativeRelationshipId")
                        .HasColumnType("int")
                        .HasColumnName("FK_RelativeRelationshipId");

                    b.Property<string>("RequesterName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("RequesterRelevanceId")
                        .HasColumnType("int")
                        .HasColumnName("FK_RequesterRelevanceId");

                    b.HasIndex(new[] { "RelativeRelationshipId" }, "IX_SocialWelfareRequest_FK_RelativeRelationshipId");

                    b.HasIndex(new[] { "RequesterRelevanceId" }, "IX_SocialWelfareRequest_FK_RequesterRelevanceId");

                    b.ToTable("SocialWelfareRequest", (string)null);
                });

            modelBuilder.Entity("ActionTypeBatchRequestStep", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.ActionType", null)
                        .WithMany()
                        .HasForeignKey("ActionTypesActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.BatchRequestStep", null)
                        .WithMany()
                        .HasForeignKey("BatchRequestStepsBatchRequestStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActionTypeWelfareRequestStep", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.ActionType", null)
                        .WithMany()
                        .HasForeignKey("ActionTypesActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequestStep", null)
                        .WithMany()
                        .HasForeignKey("WelfareRequestStepsWelfareRequestStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BatchRequestAction", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.ActionType", "ActionType")
                        .WithMany("BatchRequestActions")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.BatchRequest", "BatchRequest")
                        .WithMany("BatchRequestActions")
                        .HasForeignKey("BatchRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.BatchRequestStep", "BatchRequestStep")
                        .WithMany("BatchRequestActions")
                        .HasForeignKey("BatchRequestStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WorkflowReason", "WorkflowReason")
                        .WithMany("BatchRequestActions")
                        .HasForeignKey("WorkflowReasonId");

                    b.Navigation("ActionType");

                    b.Navigation("BatchRequest");

                    b.Navigation("BatchRequestStep");

                    b.Navigation("WorkflowReason");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BatchRequestAttachment", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.AttachmentType", "AttachmentType")
                        .WithMany("BatchRequestAttachments")
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.BatchRequest", "Batch")
                        .WithMany("BatchRequestAttachments")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentType");

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Beneficiary", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.RelativeRelationType", "RelativeRelationType")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("RelativeRelationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.SocialWelfareRequest", "SocialWelfareRequest")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("SocialWelfareRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelativeRelationType");

                    b.Navigation("SocialWelfareRequest");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Labor", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.Gender", "Gender")
                        .WithMany("Labors")
                        .HasForeignKey("GenderId");

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.BusinessNature", "LastBusinessNature")
                        .WithMany("Labors")
                        .HasForeignKey("LastBusinessNatureId");

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.Directorate", "LastDirectorate")
                        .WithMany("Labors")
                        .HasForeignKey("LastDirectorateId");

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.Party", "LastExecutionParty")
                        .WithMany("Labors")
                        .HasForeignKey("LastExecutionPartyId");

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany("Labors")
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.Occupation", "Occupation")
                        .WithMany("Labors")
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("LastBusinessNature");

                    b.Navigation("LastDirectorate");

                    b.Navigation("LastExecutionParty");

                    b.Navigation("MaritalStatus");

                    b.Navigation("Occupation");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.MedicalWelfareRequest", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.BeneficiaryType", "BeneficiaryType")
                        .WithMany("MedicalWelfareRequests")
                        .HasForeignKey("BeneficiaryTypeId");

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.MedicalServiceProvider", "MedicalServiceProvider")
                        .WithMany("MedicalWelfareRequests")
                        .HasForeignKey("MedicalServiceProviderId");

                    b.Navigation("BeneficiaryType");

                    b.Navigation("MedicalServiceProvider");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Memorandum", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.RequestType", "RequestTypeNavigation")
                        .WithMany("Memoranda")
                        .HasForeignKey("RequestType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestTypeNavigation");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.MemorandumAttachment", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.AttachmentType", "AttachmentType")
                        .WithMany("MemorandumAttachments")
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.Memorandum", "Memorandum")
                        .WithMany("MemorandumAttachments")
                        .HasForeignKey("MemorandumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentType");

                    b.Navigation("Memorandum");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Party", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.PartyType", "PartyType")
                        .WithMany("Parties")
                        .HasForeignKey("PartyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyType");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequest", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.BatchRequest", "Batch")
                        .WithMany("WelfareRequests")
                        .HasForeignKey("BatchId");

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.Directorate", "Directorate")
                        .WithMany("WelfareRequests")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.Memorandum", "Memorandum")
                        .WithMany("WelfareRequests")
                        .HasForeignKey("MemorandumId");

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.RequestStatus", "RequestStatus")
                        .WithMany("WelfareRequests")
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WelfareType", "WelfareType")
                        .WithMany("WelfareRequests")
                        .HasForeignKey("WelfareTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Directorate");

                    b.Navigation("Memorandum");

                    b.Navigation("RequestStatus");

                    b.Navigation("WelfareType");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequestAction", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.ActionType", "ActionType")
                        .WithMany("WelfareRequestActions")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequest", "WelfareRequest")
                        .WithMany("WelfareRequestActions")
                        .HasForeignKey("WelfareRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequestStep", "WelfareRequestStep")
                        .WithMany("WelfareRequestActions")
                        .HasForeignKey("WelfareRequestStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WorkflowReason", "WorkflowReason")
                        .WithMany("WelfareRequestActions")
                        .HasForeignKey("WorkflowReasonId");

                    b.Navigation("ActionType");

                    b.Navigation("WelfareRequest");

                    b.Navigation("WelfareRequestStep");

                    b.Navigation("WorkflowReason");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequestAttachment", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.AttachmentType", "AttachmentType")
                        .WithMany("WelfareRequestAttachments")
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequest", "Request")
                        .WithMany("WelfareRequestAttachments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentType");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareType", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WelfareCategory", "WelfareCategory")
                        .WithMany("WelfareTypes")
                        .HasForeignKey("WelfareCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WelfareCategory");
                });

            modelBuilder.Entity("WelfareTypesAttachmentTypes", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.AttachmentType", null)
                        .WithMany()
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WelfareType", null)
                        .WithMany()
                        .HasForeignKey("WelfareTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.DisabilityWelfareRequest", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequest", null)
                        .WithOne()
                        .HasForeignKey("S3.MoL.WelfareManagement.Domain.Entities.DisabilityWelfareRequest", "WelfareRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.SocialWelfareRequest", b =>
                {
                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.RelativeRelationship", "RelativeRelationship")
                        .WithMany("SocialWelfareRequests")
                        .HasForeignKey("RelativeRelationshipId");

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.RequesterRelevance", "RequesterRelevance")
                        .WithMany("SocialWelfareRequests")
                        .HasForeignKey("RequesterRelevanceId");

                    b.HasOne("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequest", null)
                        .WithOne()
                        .HasForeignKey("S3.MoL.WelfareManagement.Domain.Entities.SocialWelfareRequest", "WelfareRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelativeRelationship");

                    b.Navigation("RequesterRelevance");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.ActionType", b =>
                {
                    b.Navigation("BatchRequestActions");

                    b.Navigation("WelfareRequestActions");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.AttachmentType", b =>
                {
                    b.Navigation("BatchRequestAttachments");

                    b.Navigation("MemorandumAttachments");

                    b.Navigation("WelfareRequestAttachments");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BatchRequest", b =>
                {
                    b.Navigation("BatchRequestActions");

                    b.Navigation("BatchRequestAttachments");

                    b.Navigation("WelfareRequests");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BatchRequestStep", b =>
                {
                    b.Navigation("BatchRequestActions");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BeneficiaryType", b =>
                {
                    b.Navigation("MedicalWelfareRequests");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.BusinessNature", b =>
                {
                    b.Navigation("Labors");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Directorate", b =>
                {
                    b.Navigation("Labors");

                    b.Navigation("WelfareRequests");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Labors");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.MaritalStatus", b =>
                {
                    b.Navigation("Labors");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.MedicalServiceProvider", b =>
                {
                    b.Navigation("MedicalWelfareRequests");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Memorandum", b =>
                {
                    b.Navigation("MemorandumAttachments");

                    b.Navigation("WelfareRequests");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Occupation", b =>
                {
                    b.Navigation("Labors");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.Party", b =>
                {
                    b.Navigation("Labors");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.PartyType", b =>
                {
                    b.Navigation("Parties");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.RelativeRelationType", b =>
                {
                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.RelativeRelationship", b =>
                {
                    b.Navigation("SocialWelfareRequests");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.RequestStatus", b =>
                {
                    b.Navigation("WelfareRequests");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.RequestType", b =>
                {
                    b.Navigation("Memoranda");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.RequesterRelevance", b =>
                {
                    b.Navigation("SocialWelfareRequests");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareCategory", b =>
                {
                    b.Navigation("WelfareTypes");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequest", b =>
                {
                    b.Navigation("WelfareRequestActions");

                    b.Navigation("WelfareRequestAttachments");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareRequestStep", b =>
                {
                    b.Navigation("WelfareRequestActions");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WelfareType", b =>
                {
                    b.Navigation("WelfareRequests");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.WorkflowReason", b =>
                {
                    b.Navigation("BatchRequestActions");

                    b.Navigation("WelfareRequestActions");
                });

            modelBuilder.Entity("S3.MoL.WelfareManagement.Domain.Entities.SocialWelfareRequest", b =>
                {
                    b.Navigation("Beneficiaries");
                });
#pragma warning restore 612, 618
        }
    }
}
